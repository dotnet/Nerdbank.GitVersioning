trigger:
  batch: true
  branches:
    include:
    - main
    - 'v*.*'
    - 'validate/*'
  paths:
    exclude:
    - doc/
    - '*.md'
    - .vscode/
    - .github/
    - azure-pipelines/release.yml

parameters:
- name: RunTests
  displayName: Run tests
  type: boolean
  default: true

resources:
  containers:
  - container: xenial
    image: andrewarnott/linux-buildagent
  - container: bionic
    image: mcr.microsoft.com/dotnet/core/sdk:3.1-bionic
  - container: focal
    image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
  - container: archlinux
    image: andrewarnott/archlinux

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  codecov_token: 92266a45-648d-454e-8fec-beffae2e6553
  ci_feed: https://pkgs.dev.azure.com/andrewarnott/OSS/_packaging/PublicCI/nuget/v3/index.json
  ci_npm_feed: https://pkgs.dev.azure.com/andrewarnott/OSS/_packaging/PublicCI/npm/registry/
  NUGET_PACKAGES: $(Agent.TempDirectory)/.nuget/packages/

stages:
- stage: Build
  jobs:
  - template: azure-pipelines/build.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}

- stage: Test
  displayName: Functional testing
  condition: and(succeeded(), ${{ parameters.RunTests }})
  jobs:
  - job: linux
    strategy:
      matrix:
        # xenial:
        #   containerImage: xenial
        #   configureContainerCommand: 'sudo apt update && sudo apt-get install -y git'
        Ubuntu_Bionic:
          containerImage: bionic
        Ubuntu_Focal:
          containerImage: focal
        # Arch_Linux:
        #   containerImage: archlinux
        #   configureContainerCommand: 'sudo pacman -Sy --noconfirm git dotnet-sdk openssl-1.0'
    pool:
      vmImage: ubuntu-20.04
    container: $[ variables['containerImage'] ]
    steps:
    - bash: $(configureContainerCommand)
      displayName: Configure container
      condition: ne(variables['configureContainerCommand'], '')
    - template: azure-pipelines/xplattest-pipeline.yml

  - job: macOS
    strategy:
      matrix:
        macOS_Catalina:
          vmImage: macOS-12
        macOS_Monterey:
          vmImage: macOS-12
    pool:
      vmImage: $[ variables['vmImage'] ]
    steps:
    - template: azure-pipelines/xplattest-pipeline.yml

- stage: PerfAnalysis
  displayName: Perf analysis
  dependsOn: []
  jobs:
  - job: PerfTest
    strategy:
      matrix:
        ubuntu:
          imageName: ubuntu-20.04
          repoDir: '~/git'
        windows:
          imageName: windows-2022
          repoDir: '${USERPROFILE}/source/repos'
        macOS:
          imageName: macOS-12
          repoDir: '~/git'
    pool:
      vmImage: $(imageName)
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core 3.1 runtime
      inputs:
        packageType: runtime
        version: 3.1.x
    - task: UseDotNet@2
      displayName: Install .NET 6.0.301 SDK
      inputs:
        packageType: sdk
        version: 6.0.301
    - script: dotnet --info
      displayName: Show dotnet SDK info
    - bash: |
        mkdir -p $(repoDir)
        git clone https://github.com/xunit/xunit $(repoDir)/xunit
        git clone https://github.com/gimlichael/Cuemon $(repoDir)/Cuemon
        git clone https://github.com/kerryjiang/SuperSocket $(repoDir)/SuperSocket
        git clone https://github.com/dotnet/Nerdbank.GitVersioning $(repoDir)/Nerdbank.GitVersioning
      displayName: Clone test repositories
    - script: |
        dotnet build -c Release
      displayName: Build in Release mode
    - script: |
        dotnet run -c Release -f netcoreapp3.1 -- --filter GetVersionBenchmarks --artifacts $(Build.ArtifactStagingDirectory)/benchmarks/packed/$(imageName)
      workingDirectory: test/Nerdbank.GitVersioning.Benchmarks
      displayName: Run benchmarks (packed)
    - bash: |
        cd $(repoDir)/xunit
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/Cuemon
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/SuperSocket
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/Nerdbank.GitVersioning
        git unpack-objects < .git/objects/pack/*.pack
      displayName: Unpack Git repositories
    - script: |
        dotnet run -c Release -f netcoreapp3.1 -- --filter GetVersionBenchmarks --artifacts $(Build.ArtifactStagingDirectory)/benchmarks/unpacked/$(imageName)
      workingDirectory: test/Nerdbank.GitVersioning.Benchmarks
      displayName: Run benchmarks (unpacked)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/benchmarks
        ArtifactName: benchmarks
        ArtifactType: Container
      displayName: Publish benchmarks artifacts
      condition: succeededOrFailed()
