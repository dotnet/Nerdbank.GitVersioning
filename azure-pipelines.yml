trigger:
  batch: true
  branches:
    include:
      - master
      - 'v*.*'
      - 'validate/*'
  paths:
    exclude:
    - doc
    - '*.md'
    - azure-pipelines/release.yml

resources:
  containers:
  - container: xenial
    image: andrewarnott/linux-buildagent
  - container: bionic
    image: mcr.microsoft.com/dotnet/core/sdk:3.1-bionic
  - container: focal
    image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
  - container: archlinux
    image: andrewarnott/archlinux

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU

stages:
- stage: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-20.04'
          testModifier: -f net5.0
        windows:
          imageName: 'windows-2019'
          testModifier:
          dotnet32: "\"C:\\Program Files (x86)\\dotnet\\dotnet.exe\""
    variables:
    - ${{ if eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/') }}:
      - group: dotnetfoundation code signing
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      clean: true
      submodules: true # keep the warnings quiet about the wiki not being enlisted
    - script: |
        git config --global user.name ci
        git config --global user.email me@ci.com
      displayName: Configure git commit author for testing

    - task: UseDotNet@2
      displayName: Install .NET Core 3.1 runtime
      inputs:
        packageType: runtime
        version: 3.1.x

    - task: UseDotNet@2
      displayName: Install .NET Core 5.0.401 SDK
      inputs:
        packageType: sdk
        version: 5.0.401

    - task: UseDotNet@2
      displayName: Install .NET Core 6.0.100 SDK
      inputs:
        packageType: sdk
        version: 6.0.100

    - pwsh: |
        Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
        & .\dotnet-install.ps1 -Architecture x86 -Version 5.0.401 -InstallDir "C:\Program Files (x86)\dotnet\" -NoPath -Verbose
        & .\dotnet-install.ps1 -Architecture x86 -Version 6.0.100 -InstallDir "C:\Program Files (x86)\dotnet\" -NoPath -Verbose
        & .\dotnet-install.ps1 -Architecture x86 -Channel 3.1 -InstallDir "C:\Program Files (x86)\dotnet\" -NoPath -Verbose
      displayName: Install 32-bit .NET Core SDK 6.0.100, 3.1
      condition: ne(variables['dotnet32'], '')

    - script: dotnet --info
      displayName: Show dotnet SDK info

    - pwsh: |
        dotnet tool install --tool-path . nbgv
        ./nbgv cloud -a
      displayName: Set build number

    - task: DotNetCoreCLI@2
      displayName: Restore NuGet packages
      inputs:
        command: restore
        verbosityRestore: normal # detailed, normal, minimal
        projects: src/**/*.sln
        feedsToUse: config
        nugetConfigPath: src/nuget.config
        workingDirectory: src

    - task: YarnInstaller@3
      displayName: 'Use Yarn 1.x'
    - task: Yarn@3
      displayName: 'Yarn install'
      inputs:
        projectDirectory: 'src/nerdbank-gitversioning.npm'

    - script: dotnet build -c $(BuildConfiguration) --no-restore /t:build,pack /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
      displayName: Build NuGet package and tests
      workingDirectory: src

    - script: dotnet pack -c $(BuildConfiguration) --no-build -p:PackLKG=true /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild_lkg.binlog"
      displayName: Build LKG package
      workingDirectory: src/Nerdbank.GitVersioning.Tasks

    - script: dotnet publish -c $(BuildConfiguration) -o ../nerdbank-gitversioning.npm/out/nbgv.cli/tools/netcoreapp3.1/any /bl:"$(Build.ArtifactStagingDirectory)/build_logs/nbgv_publish.binlog"
      displayName: Publish nbgv tool
      workingDirectory: src/nbgv

    - task: gulp@0
      displayName: Build nerdbank-gitversioning NPM package
      inputs:
        gulpfile: src/nerdbank-gitversioning.npm/gulpfile.js

    - script: >
        dotnet test NerdBank.GitVersioning.Tests
        --no-build $(testModifier)
        -c $(BuildConfiguration)
        --filter "TestCategory!=FailsOnAzurePipelines"
        --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/TestLogs/TestResults.x64.trx"
        --results-directory $(Build.ArtifactStagingDirectory)/CodeCoverage/
        --collect:"XPlat Code Coverage"
        --
        RunConfiguration.DisableAppDomain=true
      displayName: Run x64 tests
      workingDirectory: src

    - script: >
        $(dotnet32) test NerdBank.GitVersioning.Tests
        --no-build $(testModifier)
        -c $(BuildConfiguration)
        --filter "TestCategory!=FailsOnAzurePipelines"
        --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/TestLogs/TestResults.x86.trx"
        --results-directory $(Build.ArtifactStagingDirectory)/CodeCoverage/
        --collect:"XPlat Code Coverage"
        --
        RunConfiguration.DisableAppDomain=true
      displayName: Run x86 tests
      workingDirectory: src
      condition: ne(variables['dotnet32'], '')

    - script: >
        dotnet test Cake.GitVersioning.Tests
        --no-build $(testModifier)
        -c $(BuildConfiguration)
        --filter "TestCategory!=FailsOnAzurePipelines"
        --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)/TestLogs/TestResults.cake.trx"
        --results-directory $(Build.ArtifactStagingDirectory)/CodeCoverage/
        --collect:"XPlat Code Coverage"
        --
        RunConfiguration.DisableAppDomain=true
      displayName: Run cake tests
      workingDirectory: src

    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage results
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: $(Build.ArtifactStagingDirectory)/CodeCoverage/**/coverage.cobertura.xml

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: '*.trx'
        searchFolder: $(Build.ArtifactStagingDirectory)/TestLogs
        buildPlatform: $(BuildPlatform)
        buildConfiguration: $(BuildConfiguration)
        publishRunAttachments: false
      condition: always()

    - task: CopyFiles@1
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)/bin
        Contents: |
          **\*.nupkg
          !**\*.LKG*
          js\*.tgz
        TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
        flattenFolders: true
      displayName: Collecting deployable artifacts

    - task: CopyFiles@1
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)/bin
        Contents: |
          **\*.LKG*.nupkg
        TargetFolder: $(Build.ArtifactStagingDirectory)/deployables-lkg
        flattenFolders: true
      displayName: Collecting LKG artifacts

    - pwsh: >
        dotnet tool install --tool-path obj SignClient

        obj/SignClient sign
        --baseDirectory '$(Build.ArtifactStagingDirectory)/deployables'
        --input '**/*'
        --config '$(System.DefaultWorkingDirectory)/azure-pipelines/SignClient.json'
        --filelist '$(System.DefaultWorkingDirectory)/azure-pipelines/signfiles.txt'
        --user '$(codesign_username)'
        --secret '$(codesign_secret)'
        --name 'Nerdbank.GitVersioning'
        --descriptionUrl 'https://github.com/dotnet/Nerdbank.GitVersioning'
      displayName: Code sign
      condition: and(succeeded(), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['Build.Reason'], 'PullRequest'))

    - pwsh: >
        obj/SignClient sign
        --baseDirectory '$(Build.ArtifactStagingDirectory)/deployables-lkg'
        --input '**/*'
        --config '$(System.DefaultWorkingDirectory)/azure-pipelines/SignClient.json'
        --filelist '$(System.DefaultWorkingDirectory)/azure-pipelines/signfiles.txt'
        --user '$(codesign_username)'
        --secret '$(codesign_secret)'
        --name 'Nerdbank.GitVersioning'
        --descriptionUrl 'https://github.com/dotnet/Nerdbank.GitVersioning'
      displayName: Code sign LKG
      condition: and(succeeded(), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['Build.Reason'], 'PullRequest'))

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
        ArtifactName: deployables
        ArtifactType: Container
      displayName: Publish deployables artifacts
      # Only deploy when from a single build in the build matrix
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables-lkg
        ArtifactName: deployables-lkg
        ArtifactType: Container
      displayName: Publish deployables-lkg artifact
      # Only deploy when from a single build in the build matrix
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
        ArtifactName: build_logs
        ArtifactType: Container
      displayName: Publish build_logs artifacts
      condition: succeededOrFailed()
    - task: NuGetCommand@2
      displayName: Pushing package to PublicCI feed
      inputs:
        command: push
        packagesToPush: $(Build.ArtifactStagingDirectory)/deployables/*.*nupkg
        nuGetFeedType: internal
        publishVstsFeed: OSS/PublicCI
        allowPackageConflicts: true
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), ne(variables['Build.Reason'], 'PullRequest'))

    - pwsh: Set-Content -Path "$(Agent.TempDirectory)/.npmrc" -Value "registry=https://pkgs.dev.azure.com/andrewarnott/OSS/_packaging/PublicCI/npm/registry/`nalways-auth=true"
      displayName: Prepare to push to PublicCI
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), ne(variables['Build.Reason'], 'PullRequest'))
    - task: npmAuthenticate@0
      displayName: Authenticate to PublicCI
      inputs:
        workingFile: $(Agent.TempDirectory)/.npmrc
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), ne(variables['Build.Reason'], 'PullRequest'))
    - pwsh: |
        $tgz = (Get-ChildItem "$(Build.ArtifactStagingDirectory)/deployables/*.tgz")[0].FullName
        Write-Host "Will publish $tgz"
        npm publish $tgz
      workingDirectory: $(Agent.TempDirectory)
      displayName: npm publish to PublicCI feed
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/andrewarnott/'), ne(variables['Build.Reason'], 'PullRequest'))
      continueOnError: true

- stage: Test
  displayName: Functional testing
  jobs:
  - job: linux
    strategy:
      matrix:
        # xenial:
        #   containerImage: xenial
        #   configureContainerCommand: 'sudo apt update && sudo apt-get install -y git'
        Ubuntu_Bionic:
          containerImage: bionic
        Ubuntu_Focal:
          containerImage: focal
        # Arch_Linux:
        #   containerImage: archlinux
        #   configureContainerCommand: 'sudo pacman -Sy --noconfirm git dotnet-sdk openssl-1.0'
    pool:
      vmImage: ubuntu-20.04
    container: $[ variables['containerImage'] ]
    steps:
    - bash: $(configureContainerCommand)
      displayName: Configure container
      condition: ne(variables['configureContainerCommand'], '')
    - template: azure-pipelines/xplattest-pipeline.yml

  - job: macOS
    pool:
      vmImage: macOS-10.15
    steps:
    - template: azure-pipelines/xplattest-pipeline.yml

- stage: PerfAnalysis
  displayName: Perf analysis
  dependsOn: []
  jobs:
  - job: PerfTest
    strategy:
      matrix:
        ubuntu:
          imageName: ubuntu-18.04
          repoDir: '~/git'
        windows:
          imageName: windows-2019
          repoDir: '${USERPROFILE}/source/repos'
        macOS:
          imageName: macOS-10.15
          repoDir: '~/git'
    pool:
      vmImage: $(imageName)
    steps:
    - task: UseDotNet@2
      displayName: Install .NET Core 3.1 runtime
      inputs:
        packageType: runtime
        version: 3.1.x
    - task: UseDotNet@2
      displayName: Install .NET Core 5.0.401 SDK
      inputs:
        packageType: sdk
        version: 5.0.401
    - task: UseDotNet@2
      displayName: Install .NET Core 6.0.100 SDK
      inputs:
        packageType: sdk
        version: 6.0.100
    - script: dotnet --info
      displayName: Show dotnet SDK info
    - bash: |
        mkdir -p $(repoDir)
        git clone https://github.com/xunit/xunit $(repoDir)/xunit
        git clone https://github.com/gimlichael/Cuemon $(repoDir)/Cuemon
        git clone https://github.com/kerryjiang/SuperSocket $(repoDir)/SuperSocket
        git clone https://github.com/dotnet/NerdBank.GitVersioning $(repoDir)/NerdBank.GitVersioning
      displayName: Clone test repositories
    - script: |
        dotnet build -c Release
      workingDirectory: src/
      displayName: Build in Release mode
    - script: |
        dotnet run -c Release -f netcoreapp3.1 -- --filter GetVersionBenchmarks --artifacts $(Build.ArtifactStagingDirectory)/benchmarks/packed/$(imageName)
      workingDirectory: src/NerdBank.GitVersioning.Benchmarks
      displayName: Run benchmarks (packed)
    - bash: |
        cd $(repoDir)/xunit
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/Cuemon
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/SuperSocket
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/NerdBank.GitVersioning
        git unpack-objects < .git/objects/pack/*.pack
      displayName: Unpack Git repositories
    - script: |
        dotnet run -c Release -f netcoreapp3.1 -- --filter GetVersionBenchmarks --artifacts $(Build.ArtifactStagingDirectory)/benchmarks/unpacked/$(imageName)
      workingDirectory: src/NerdBank.GitVersioning.Benchmarks
      displayName: Run benchmarks (unpacked)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/benchmarks
        ArtifactName: benchmarks
        ArtifactType: Container
      displayName: Publish benchmarks artifacts
      condition: succeededOrFailed()
