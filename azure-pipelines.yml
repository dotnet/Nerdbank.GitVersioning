trigger:
  batch: true
  branches:
    include:
    - main
    - 'v*.*'
    - 'validate/*'
  paths:
    exclude:
    - doc/
    - '*.md'
    - .vscode/
    - .github/
    - azure-pipelines/release.yml

parameters:
- name: RunTests
  displayName: Run tests
  type: boolean
  default: true

resources:
  containers:
  - container: focal
    image: mcr.microsoft.com/dotnet/sdk:6.0-focal
  - container: jammy60
    image: mcr.microsoft.com/dotnet/sdk:6.0-jammy
  - container: jammy70
    image: mcr.microsoft.com/dotnet/sdk:7.0-jammy
  - container: debian
    image: mcr.microsoft.com/dotnet/sdk:latest

variables:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  codecov_token: 92266a45-648d-454e-8fec-beffae2e6553
  ci_feed: https://pkgs.dev.azure.com/andrewarnott/OSS/_packaging/PublicCI/nuget/v3/index.json
  ci_npm_feed: https://pkgs.dev.azure.com/andrewarnott/OSS/_packaging/PublicCI/npm/registry/
  NUGET_PACKAGES: $(Agent.TempDirectory)/.nuget/packages/

stages:
- stage: Build
  jobs:
  - template: azure-pipelines/build.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}

- stage: Test
  displayName: Functional testing
  condition: and(succeeded(), ${{ parameters.RunTests }})
  jobs:
  - job: linux
    strategy:
      matrix:
        Ubuntu_Focal:
          containerImage: focal
        Ubuntu_Jammy_60:
          containerImage: jammy60
        Ubuntu_Jammy_70:
          containerImage: jammy70
        Debian:
          containerImage: debian
    pool:
      vmImage: ubuntu-22.04
    container: $[ variables['containerImage'] ]
    steps:
    - bash: $(configureContainerCommand)
      displayName: Configure container
      condition: ne(variables['configureContainerCommand'], '')
    - template: azure-pipelines/xplattest-pipeline.yml

  - job: macOS
    strategy:
      matrix:
        macOS_Catalina:
          vmImage: macOS-12
        macOS_Monterey:
          vmImage: macOS-12
    pool:
      vmImage: $[ variables['vmImage'] ]
    steps:
    - template: azure-pipelines/xplattest-pipeline.yml

- stage: PerfAnalysis
  displayName: Perf analysis
  dependsOn: []
  jobs:
  - job: PerfTest
    strategy:
      matrix:
        ubuntu:
          imageName: ubuntu-22.04
          repoDir: '~/git'
        windows:
          imageName: windows-2022
          repoDir: '${USERPROFILE}/source/repos'
        macOS:
          imageName: macOS-12
          repoDir: '~/git'
    pool:
      vmImage: $(imageName)
    steps:
    - checkout: self
      fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
      clean: true
      submodules: true # keep the warnings quiet about the wiki not being enlisted
    - task: UseDotNet@2
      displayName: Install .NET 7.0.302 SDK
      inputs:
        packageType: sdk
        version: 7.0.302
    - script: dotnet --info
      displayName: Show dotnet SDK info
    - bash: |
        mkdir -p $(repoDir)
        git clone https://github.com/xunit/xunit $(repoDir)/xunit
        git clone https://github.com/gimlichael/Cuemon $(repoDir)/Cuemon
        git clone https://github.com/kerryjiang/SuperSocket $(repoDir)/SuperSocket
        git clone https://github.com/dotnet/Nerdbank.GitVersioning $(repoDir)/Nerdbank.GitVersioning
      displayName: Clone test repositories
    - script: |
        dotnet build -c Release
      displayName: Build in Release mode
    - script: |
        dotnet run -c Release -f net7.0 -- --filter *GetVersionBenchmarks* --artifacts $(Build.ArtifactStagingDirectory)/benchmarks/packed/$(imageName)
      workingDirectory: test/Nerdbank.GitVersioning.Benchmarks
      displayName: Run benchmarks (packed)
    - bash: |
        cd $(repoDir)/xunit
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/Cuemon
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/SuperSocket
        git unpack-objects < .git/objects/pack/*.pack

        cd $(repoDir)/Nerdbank.GitVersioning
        git unpack-objects < .git/objects/pack/*.pack
      displayName: Unpack Git repositories
    - script: |
        dotnet run -c Release -f net7.0 -- --filter '*GetVersionBenchmarks*' --artifacts $(Build.ArtifactStagingDirectory)/benchmarks/unpacked/$(imageName)
      workingDirectory: test/Nerdbank.GitVersioning.Benchmarks
      displayName: Run benchmarks (unpacked)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: $(Build.ArtifactStagingDirectory)/benchmarks
        ArtifactName: benchmarks
        ArtifactType: Container
      displayName: Publish benchmarks artifacts
      condition: succeededOrFailed()
